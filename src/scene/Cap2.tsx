/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { AnimationClip, BackSide, Color, FrontSide, Vector3 } from "three";
import { GhibliShader } from "../shaders/GhibliShader";
import { useFrame } from "@react-three/fiber";
import { OutlineMaterial } from "../shaders/OutlineShader";

type GLTFResult = GLTF & {
    nodes: {
        Capybara: THREE.SkinnedMesh;
        root: THREE.Bone;
        ["MCH-torsoparent"]: THREE.Bone;
        ["MCH-front_foot_ikparentL"]: THREE.Bone;
        ["MCH-front_thigh_ik_targetparentL"]: THREE.Bone;
        ["MCH-front_foot_ikparentR"]: THREE.Bone;
        ["MCH-front_thigh_ik_targetparentR"]: THREE.Bone;
        ["MCH-foot_ikparentL"]: THREE.Bone;
        ["MCH-thigh_ik_targetparentL"]: THREE.Bone;
        ["MCH-foot_ikparentR"]: THREE.Bone;
        ["MCH-thigh_ik_targetparentR"]: THREE.Bone;
    };
    materials: {};
};

type ActionName = "Walk";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Model(props: JSX.IntrinsicElements["group"]) {
    const group = useRef<THREE.Group>(null!);
    const { nodes, materials, animations } = useGLTF("/models/cap.glb") as GLTFResult;
    const { actions, mixer } = useAnimations(animations, group);
    useFrame(() => {
        if (group.current) {
            group.current.translateZ(0.018)
        }

    })
    useEffect(() => {
        mixer.timeScale = 0.7
        actions.Walk?.play()
    }, [actions])
    const uniforms = useMemo(() => {
        return {
            colorMap: {
                value: [
                    new Color('#D39E85').convertLinearToSRGB(),
                    new Color('#9E7258').convertLinearToSRGB(),
                    new Color('#7E5C45').convertLinearToSRGB(),
                    new Color('#2D1900').convertLinearToSRGB()
                ]
            },
            brightnessThresholds: {
                value: [0.9, 0.35, 0.001],
            },
            lightPosition: {
                value: new Vector3(15, 15, 15)
            }
        }
    }, [])
    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group name="rig">
                    <primitive object={nodes.root} />
                    <primitive object={nodes["MCH-torsoparent"]} />
                    <primitive object={nodes["MCH-front_foot_ikparentL"]} />
                    <primitive object={nodes["MCH-front_thigh_ik_targetparentL"]} />
                    <primitive object={nodes["MCH-front_foot_ikparentR"]} />
                    <primitive object={nodes["MCH-front_thigh_ik_targetparentR"]} />
                    <primitive object={nodes["MCH-foot_ikparentL"]} />
                    <primitive object={nodes["MCH-thigh_ik_targetparentL"]} />
                    <primitive object={nodes["MCH-foot_ikparentR"]} />
                    <primitive object={nodes["MCH-thigh_ik_targetparentR"]} />

                    <skinnedMesh
                        name="Capybara"
                        geometry={nodes.Capybara.geometry}
                        skeleton={nodes.Capybara.skeleton}
                        castShadow
                        receiveShadow
                    >
                        <shaderMaterial {...GhibliShader} uniforms={uniforms} side={FrontSide} />

                    </skinnedMesh>



                </group>
            </group>
        </group>
    );
}

useGLTF.preload("/models/cap.glb");
