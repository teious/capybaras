/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { ForwardedRef, forwardRef, useEffect, useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { BackSide, FrontSide, Group, Mesh } from "three";
import { MeshBVH, StaticGeometryGenerator } from "three-mesh-bvh";

type GLTFResult = GLTF & {
    nodes: {
        Plane: THREE.Mesh;
    };
    materials: {};
};

export const Model = forwardRef((props: JSX.IntrinsicElements["group"], ref: ForwardedRef<Group>) =>{
    const { nodes } = useGLTF("/models/terrain.glb") as GLTFResult;
    return (
        <group ref={ref} {...props} dispose={null}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Plane.geometry}
                scale={8.59}
            >
                {props.children}
            </mesh>
        </group>
    );
}
)
useGLTF.preload("/models/terrain.glb");

export function Ground() {
    const groundRef = useRef<Group>(null!)
    
    const mergedGeometry = useMemo(()=>{
        const { current: ground } = groundRef;
        if(ground){
            const staticGenerator = new StaticGeometryGenerator(ground);
            staticGenerator.attributes = ['position'];
            return staticGenerator.generate();
        }
                
        
    },[groundRef])

    if(mergedGeometry){
        mergedGeometry.boundsTree = new MeshBVH(mergedGeometry);
    }
    return (
        <>
            <Model castShadow receiveShadow position={[0, -3.04, 0]} >
                <shadowMaterial opacity={0.4} />
            </Model>
            <Model ref={groundRef} castShadow receiveShadow position={[0, -3.05, 0]} >
                <meshLambertMaterial color={'#36a745'} />
            </Model>

            <mesh geometry={mergedGeometry}>
                <meshBasicMaterial wireframe color={'red'}  opacity={0.5} />
            </mesh>
        </>
    )
}